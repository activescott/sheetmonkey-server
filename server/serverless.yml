# Welcome to Serverless!
#
# This file is the main config file for your service.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sheetmonkey-server

plugins:
  - serverless-dynamodb-local
  - serverless-apigwy-binary

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: beta
  region: us-west-2
  versionFunctions: false

  environment:
    SS_CLIENT_ID: ${file(data/private/ss-oauth.json):clientID}
    SS_CLIENT_SECRET: ${file(data/private/ss-oauth.json):secret}
    DDB_USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users
    DDB_PLUGINS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-plugins
    DDB_API_TOKENS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-apiTokens

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DDB_USERS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DDB_PLUGINS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DDB_API_TOKENS_TABLE}"

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DDB_USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    pluginsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DDB_PLUGINS_TABLE}
        AttributeDefinitions:
          - AttributeName: manifestUrl
            AttributeType: S
        KeySchema:
          - AttributeName: manifestUrl
            KeyType: HASH          
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    apiTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DDB_API_TOKENS_TABLE}
        AttributeDefinitions:
          - AttributeName: manifestUrl
            AttributeType: S
          - AttributeName: userID
            AttributeType: N
        KeySchema:
          - AttributeName: userID
            KeyType: HASH
          - AttributeName: manifestUrl
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  echo:
    handler: handler.echo
    events:
      - http:
          path: api/echo
          method: get
      - http:
          path: api/echo/{url}
          method: get
      - http:
          path: api/echogreedy/{url+}
          method: get

  ping:
    handler: handler.ping
    events:
      - http:
          path: api/ping
          method: get

  jwt:
    handler: handler.jwt #NOTE: don't add an http event to this! This is just for testing locally.
      
  env:
    handler: handler.env #NOTE: don't add an http event to this! This is just for testing locally.

  oauthcodecatcher:
    handler: handler.handleOAuthRedirect
    events:
      - http:
          path: api/oauth/codecatcher
          method: get

  users_me:
    handler: handler.users_me
    events:
      - http:
          path: api/users/me
          method: get

  plugins_getPrivate:
    handler: handler.plugins_getPrivate
    events:
      - http: GET api/users/{userID}/plugins/{manifestUrl}
  plugins_getPublic:
    handler: handler.plugins_getPublic
    events:
      - http: GET api/plugins/{manifestUrl}
  plugins_listPublic:
    handler: handler.plugins_listPublic
    events:
      - http: GET api/plugins
  plugins_post:
    handler: handler.plugins_post
    events:
      - http: POST api/users/{userID}/plugins
  plugins_listPrivate:
    handler: handler.plugins_listPrivate
    events:
      - http: GET api/users/{userID}/plugins
  plugins_put:
    handler: handler.plugins_put
    events:
      - http: PUT api/users/{userID}/plugins/{manifestUrl}
  plugins_delete:
    handler: handler.plugins_delete
    events:
      - http: DELETE api/users/{userID}/plugins/{manifestUrl}

  pluginauthflow:
    handler: handler.pluginauthflow
    events:
      - http: GET api/pluginauthcallback/{manifestUrl}

  ssapiproxy:
    handler: handler.ssapiproxy
    events:
      - http: GET api/ssapiproxy/{request+}
      - http: PUT api/ssapiproxy/{request+}
      - http: POST api/ssapiproxy/{request+}
      - http: DELETE api/ssapiproxy/{request+}

  defaultredir:
    handler: handler.defaultredirect
    events:
      - http:
          path: /
          method: get

  staticfiles:
    handler: handler.staticfile
    events:
      - http:
          path: index.html
          method: get
      - http:
          path: vendor/{url}
          method: get
      - http:
          path: fonts/{fonts+}
          integration: lambda
          method: get
          contentHandling: CONVERT_TO_BINARY
      - http:
          path: bootstrap.min.js
          method: get
      - http:
          path: index_dist.js
          method: get
      - http:
          path: index.js
          method: get
      - http:
          path: style.css
          method: get
      - http:
          path: svelte.css
          method: get
  